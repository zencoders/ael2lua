===================================== ael2lua =====================================

        When you see this tree, know that you've came across ZenCoders.org        

                                with open('zencodes.                                  
                          `num` in numbers    synchronized                            
                      datetime d      glob.      sys.argv[2] .                        
                   def myclass   `..` @@oscla   org.    .  class {                    
                displ  hooks(   public static void   ma     functor:                  
              $myclass->method(  impport sys, os.pipe `    @param name`               
            fcl   if(system(cmd) myc.  /de   `  $card(  array("a"   srand             
          format  lists:  ++:   conc    ++ "my  an    WHERE  for(   == myi            
        `sys:  myvalue(myvalue) sys.t    Console.W   try{    rais     using           
       connec  SELECT * FROM table mycnf  acco desc and or selector::clas  at         
      openldap string  sys.   print "zenc der " { 'a':   `ls -l` <  appe &firs        
     import Tkinter    paste( $obh  &a or it myval  bro roll:   :: [] require a       
    case `` super. +y  <svg x="100">   expr    say " %rooms 1  --account fb-  yy      
   proc     meth Animate => send(D, open)     putd    EndIf 10  whi    myc`  cont     
  and     main (--) import loop $$ or  end onload   UNION WITH tab    timer 150 *2    
  end. begin True  GtkLabel *label    doto partition te    let auto  i<- (i + d ) ;   
 .mushup ``/.   ^/zenc/    myclass->her flv    op             <> element >> 71   or   
 QFileDi   :   and  ..    with myc   toA  channel::bo    myc isEmpty a  not   bodt;  
 class T   public pol    str    mycalc d   pt &&a     *i fc  add                ^ac  
 ::zencoders::core::namespac   boost::function st  f = std:   ;;      int     assert 
 cou   << endl   public genera    #include "b ost   ::ac myna  const cast<char*> mys 
 &ac   size_t   return ran  int (*getNextValue)(void) ff   double  sa_family_t famil 
 pu         a   do puts("       ac    int main(int argc, char*    "%5d    struct nam 
 cs                float       for     typedef     enum  puts             getchar()   
 if(                         else      #define      fp    FILE* f           char* s   
  i++                                  strcat(            %s                    int   
  31]                                  total+=                                  do    
   }do                                 while(1)                                sle    
   getc                               strcpy( a                               for     
    prin                             scanf(%d, &                             get      
     #inc                          <stdio.h> #ifn                           arg       
      int                       void myfunc(int par                       retu        
        BEQ                 BGEZAL R1 10 ANDI R1 R2 1                    SYS          
         XOR               SYSCAL 5 SLTIU   MFLO 15 SW                 JAL            
           BNE           BLTZAL R1 1 LUI   001 NOOP MULTU            SLLV             
             MOV R1     ADD R1 R2  JUMP   10 1001 BEQ R1 R2 1      AND                
                1101  1010001100  111 001 01  1010 101100 1001   100                  
                  110110 100   0  01  101 01100 100 100 1000100011                    
                     11101001001  00   11  100    11  10100010                        
                         000101001001 10  1001    101000101                           
                              010010010010110101001010             

For further information:
ZenCoders Website : www.zencoders.org

Authors : Dario Mazza && Sebastiano Merlino

Dependencies: flex, bison (no other c++ dependencies)
Building system: There is a practical Makefile that travels with this code. In order to make all the code just type 'make'.

The generator is called 'ael'; it can be run calling './ael input_filename [output_filename]'. If you don't pass the output_filename
                                the translator will print the output to stdout.

In order to try the generated code, you must install lua interpreter and liblua0 development packages. Doing so, you can compile your asterisk
installation with LUA scripting support enabled.

When you have an asterisk installation with lua support enabled you can easily load your translated files renaming them to 'extensions.lua' and
putting them into asterisk main directory '${PREFIX}/etc/asterisk'.

To try your dialplans with asterisk, just download a softphone and connect it with your running asterisk instance and then, call the specified context
and try your dialplans.
